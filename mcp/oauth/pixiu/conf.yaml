# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# MCP OAuth (Authorization) Sample Configuration
# - Only protects the /mcp endpoint via MCP Authorization filter
# - Uses a local authorization server at http://localhost:9000
# - Uses remote JWKS served by the local authorization server

static_resources:
  listeners:
    - name: "net/http"
      protocol_type: "HTTP"
      address:
        socket_address:
          address: "0.0.0.0"
          port: 8888
      filter_chains:
        filters:
          - name: "dgp.filter.httpconnectionmanager"
            config:
              route_config:
                routes:
                  # Protected MCP endpoint
                  - match:
                      prefix: "/"
                    route:
                      cluster: "mcp-protected"
                      cluster_not_found_response_code: 505
              http_filters:
                - name: "dgp.filter.http.cors"
                  config:
                    allow_origin:
                      - "*"
                    allow_methods: "GET, POST, PUT, DELETE, OPTIONS"
                    allow_headers: "Content-Type, Authorization, X-Requested-With"
                    max_age: "3600"
                # MCP Authorization Filter (protect /mcp)
                - name: "dgp.filter.http.auth.mcp"
                  config:
                    resource_metadata:
                      path: "/.well-known/oauth-protected-resource/mcp"
                      resource: "http://localhost:8888/mcp"
                      authorization_servers:
                        - "http://localhost:9000"
                    providers:
                      - name: "local"
                        issuer: "http://localhost:9000"
                        jwks: "http://localhost:9000/.well-known/jwks.json"
                    rules:
                      - cluster: "mcp-protected"

                # MCP Server Filter - Tools Configuration (same as simple)
                - name: "dgp.filter.mcp.mcpserver"
                  config:
                    server_info:
                      name: "MCP OAuth Sample Server"
                      version: "1.0.0"
                      description: "MCP Server protected by OAuth for tools demonstration"
                      instructions: "Use read/write tokens to interact with the mock server API via MCP"

                    tools:
                      - name: "get_user"
                        description: "Get user information by ID with optional profile details"
                        cluster: "mock-server"
                        request:
                          method: "GET"
                          path: "/api/users/{id}"
                          timeout: "10s"
                        args:
                          - name: "id"
                            type: "integer"
                            in: "path"
                            description: "User ID to retrieve"
                            required: true
                          - name: "include_profile"
                            type: "boolean"
                            in: "query"
                            description: "Include user profile information"
                            required: false
                            default: false

                      - name: "search_users"
                        description: "Search users by name or email with pagination"
                        cluster: "mock-server"
                        request:
                          method: "GET"
                          path: "/api/users/search"
                          timeout: "10s"
                        args:
                          - name: "q"
                            type: "string"
                            in: "query"
                            description: "Search query (name or email)"
                            required: true
                          - name: "page"
                            type: "integer"
                            in: "query"
                            description: "Page number for pagination"
                            required: false
                            default: 1
                          - name: "limit"
                            type: "integer"
                            in: "query"
                            description: "Number of results per page (1-100)"
                            required: false
                            default: 10

                      - name: "create_user"
                        description: "Create a new user account"
                        cluster: "mock-server"
                        request:
                          method: "POST"
                          path: "/api/users"
                          timeout: "10s"
                          headers:
                            Content-Type: "application/json"
                        args:
                          - name: "name"
                            type: "string"
                            in: "body"
                            description: "User's full name"
                            required: true
                          - name: "email"
                            type: "string"
                            in: "body"
                            description: "User's email address"
                            required: true
                          - name: "age"
                            type: "integer"
                            in: "body"
                            description: "User's age"
                            required: false

                      - name: "get_user_posts"
                        description: "Get all posts by a specific user with status filtering"
                        cluster: "mock-server"
                        request:
                          method: "GET"
                          path: "/api/users/{user_id}/posts"
                          timeout: "10s"
                        args:
                          - name: "user_id"
                            type: "integer"
                            in: "path"
                            description: "User ID to get posts for"
                            required: true
                          - name: "status"
                            type: "string"
                            in: "query"
                            description: "Filter posts by status"
                            required: false
                            default: "published"
                            enum: ["published", "draft", "all"]

                      - name: "health_check"
                        description: "Check the health and status of the server service"
                        cluster: "mock-server"
                        request:
                          method: "GET"
                          path: "/api/health"
                          timeout: "5s"

                      - name: "get_server_info"
                        description: "Get basic server information and available endpoints"
                        cluster: "mock-server"
                        request:
                          method: "GET"
                          path: "/"
                          timeout: "5s"

                # Downstream HTTP proxy
                - name: "dgp.filter.http.httpproxy"

  clusters:
    - name: "mock-server"
      type: "STATIC"
      lb_policy: "ROUND_ROBIN"
      endpoints:
        - socket_address:
            address: "127.0.0.1"
            port: 8081

    # Virtual cluster for protected MCP endpoint routing
    - name: "mcp-protected"
      type: "STATIC"
      lb_policy: "ROUND_ROBIN"
      endpoints:
        - socket_address:
            address: "127.0.0.1"
            port: 8081


